// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ProcessorUtilization.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from ProcessorUtilization.proto</summary>
public static partial class ProcessorUtilizationReflection {

  #region Descriptor
  /// <summary>File descriptor for ProcessorUtilization.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ProcessorUtilizationReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChpQcm9jZXNzb3JVdGlsaXphdGlvbi5wcm90byJPChRQcm9jZXNzb3JVdGls",
          "aXphdGlvbhIPCgdwZXJjZW50GAEgAigCEhIKCm1pblBlcmNlbnQYAiACKAIS",
          "EgoKbWF4UGVyY2VudBgDIAIoAg=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ProcessorUtilization), global::ProcessorUtilization.Parser, new[]{ "Percent", "MinPercent", "MaxPercent" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
///
/// Current processor utilization statistics
/// </summary>
[global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
public sealed partial class ProcessorUtilization : pb::IMessage<ProcessorUtilization>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProcessorUtilization> _parser = new pb::MessageParser<ProcessorUtilization>(() => new ProcessorUtilization());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProcessorUtilization> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProcessorUtilizationReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProcessorUtilization() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProcessorUtilization(ProcessorUtilization other) : this() {
    _hasBits0 = other._hasBits0;
    percent_ = other.percent_;
    minPercent_ = other.minPercent_;
    maxPercent_ = other.maxPercent_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProcessorUtilization Clone() {
    return new ProcessorUtilization(this);
  }

  /// <summary>Field number for the "percent" field.</summary>
  public const int PercentFieldNumber = 1;
  private readonly static float PercentDefaultValue = 0F;

  private float percent_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Percent {
    get { if ((_hasBits0 & 1) != 0) { return percent_; } else { return PercentDefaultValue; } }
    set {
      _hasBits0 |= 1;
      percent_ = value;
    }
  }
  /// <summary>Gets whether the "percent" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPercent {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "percent" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPercent() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "minPercent" field.</summary>
  public const int MinPercentFieldNumber = 2;
  private readonly static float MinPercentDefaultValue = 0F;

  private float minPercent_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float MinPercent {
    get { if ((_hasBits0 & 2) != 0) { return minPercent_; } else { return MinPercentDefaultValue; } }
    set {
      _hasBits0 |= 2;
      minPercent_ = value;
    }
  }
  /// <summary>Gets whether the "minPercent" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMinPercent {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "minPercent" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMinPercent() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "maxPercent" field.</summary>
  public const int MaxPercentFieldNumber = 3;
  private readonly static float MaxPercentDefaultValue = 0F;

  private float maxPercent_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float MaxPercent {
    get { if ((_hasBits0 & 4) != 0) { return maxPercent_; } else { return MaxPercentDefaultValue; } }
    set {
      _hasBits0 |= 4;
      maxPercent_ = value;
    }
  }
  /// <summary>Gets whether the "maxPercent" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMaxPercent {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "maxPercent" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMaxPercent() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProcessorUtilization);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProcessorUtilization other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Percent, other.Percent)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinPercent, other.MinPercent)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxPercent, other.MaxPercent)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPercent) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Percent);
    if (HasMinPercent) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinPercent);
    if (HasMaxPercent) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxPercent);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasPercent) {
      output.WriteRawTag(13);
      output.WriteFloat(Percent);
    }
    if (HasMinPercent) {
      output.WriteRawTag(21);
      output.WriteFloat(MinPercent);
    }
    if (HasMaxPercent) {
      output.WriteRawTag(29);
      output.WriteFloat(MaxPercent);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasPercent) {
      output.WriteRawTag(13);
      output.WriteFloat(Percent);
    }
    if (HasMinPercent) {
      output.WriteRawTag(21);
      output.WriteFloat(MinPercent);
    }
    if (HasMaxPercent) {
      output.WriteRawTag(29);
      output.WriteFloat(MaxPercent);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasPercent) {
      size += 1 + 4;
    }
    if (HasMinPercent) {
      size += 1 + 4;
    }
    if (HasMaxPercent) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProcessorUtilization other) {
    if (other == null) {
      return;
    }
    if (other.HasPercent) {
      Percent = other.Percent;
    }
    if (other.HasMinPercent) {
      MinPercent = other.MinPercent;
    }
    if (other.HasMaxPercent) {
      MaxPercent = other.MaxPercent;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          Percent = input.ReadFloat();
          break;
        }
        case 21: {
          MinPercent = input.ReadFloat();
          break;
        }
        case 29: {
          MaxPercent = input.ReadFloat();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 13: {
          Percent = input.ReadFloat();
          break;
        }
        case 21: {
          MinPercent = input.ReadFloat();
          break;
        }
        case 29: {
          MaxPercent = input.ReadFloat();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
